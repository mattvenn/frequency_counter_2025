; SMT-LIBv2 description generated by Yosys 0.25+1 (git sha1 d3216593d, clang 10.0.0-4ubuntu1 -fPIC -Os)
; yosys-smt2-module edge_detect
(declare-sort |edge_detect_s| 0)
(declare-fun |edge_detect_is| (|edge_detect_s|) Bool)
(declare-fun |edge_detect#0| (|edge_detect_s|) Bool) ; \signal
; yosys-smt2-input signal 1
; yosys-smt2-wire signal 1
; yosys-smt2-witness {"offset": 0, "path": ["\\signal"], "smtname": "signal", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |edge_detect_n signal| ((state |edge_detect_s|)) Bool (|edge_detect#0| state))
; yosys-smt2-anyinit edge_detect#1 1 edge_detect.v:11.5-15.8
; yosys-smt2-witness {"offset": 0, "path": ["\\q2"], "smtname": 1, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |edge_detect#1| (|edge_detect_s|) (_ BitVec 1)) ; \q2
; yosys-smt2-register q2 1
; yosys-smt2-wire q2 1
(define-fun |edge_detect_n q2| ((state |edge_detect_s|)) Bool (= ((_ extract 0 0) (|edge_detect#1| state)) #b1))
; yosys-smt2-anyinit edge_detect#2 1 edge_detect.v:11.5-15.8
; yosys-smt2-witness {"offset": 0, "path": ["\\q1"], "smtname": 2, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |edge_detect#2| (|edge_detect_s|) (_ BitVec 1)) ; \q1
; yosys-smt2-register q1 1
; yosys-smt2-wire q1 1
(define-fun |edge_detect_n q1| ((state |edge_detect_s|)) Bool (= ((_ extract 0 0) (|edge_detect#2| state)) #b1))
; yosys-smt2-anyinit edge_detect#3 1 edge_detect.v:11.5-15.8
; yosys-smt2-witness {"offset": 0, "path": ["\\q0"], "smtname": 3, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |edge_detect#3| (|edge_detect_s|) (_ BitVec 1)) ; \q0
; yosys-smt2-register q0 1
; yosys-smt2-wire q0 1
(define-fun |edge_detect_n q0| ((state |edge_detect_s|)) Bool (= ((_ extract 0 0) (|edge_detect#3| state)) #b1))
(define-fun |edge_detect#4| ((state |edge_detect_s|)) Bool (distinct (|edge_detect#1| state) (|edge_detect#2| state))) ; $ne$edge_detect.v:17$41_Y
(define-fun |edge_detect#5| ((state |edge_detect_s|)) (_ BitVec 1) (bvand (|edge_detect#2| state) (ite (|edge_detect#4| state) #b1 #b0))) ; \leading_edge_detect
; yosys-smt2-output leading_edge_detect 1
; yosys-smt2-wire leading_edge_detect 1
(define-fun |edge_detect_n leading_edge_detect| ((state |edge_detect_s|)) Bool (= ((_ extract 0 0) (|edge_detect#5| state)) #b1))
(declare-fun |edge_detect#6| (|edge_detect_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |edge_detect_n clk| ((state |edge_detect_s|)) Bool (|edge_detect#6| state))
(define-fun |edge_detect_a| ((state |edge_detect_s|)) Bool true)
(define-fun |edge_detect_u| ((state |edge_detect_s|)) Bool true)
(define-fun |edge_detect_i| ((state |edge_detect_s|)) Bool true)
(define-fun |edge_detect_h| ((state |edge_detect_s|)) Bool true)
(define-fun |edge_detect_t| ((state |edge_detect_s|) (next_state |edge_detect_s|)) Bool (and
  (= (ite (|edge_detect#0| state) #b1 #b0) (|edge_detect#3| next_state)) ; $procdff$135 \q0
  (= (|edge_detect#3| state) (|edge_detect#2| next_state)) ; $procdff$136 \q1
  (= (|edge_detect#2| state) (|edge_detect#1| next_state)) ; $procdff$137 \q2
)) ; end of module edge_detect
; yosys-smt2-module seven_segment
(declare-sort |seven_segment_s| 0)
(declare-fun |seven_segment_is| (|seven_segment_s|) Bool)
; yosys-smt2-anyinit seven_segment#0 4 seven_segment.v:17.5-34.8
; yosys-smt2-witness {"offset": 0, "path": ["\\unit_count_reg"], "smtname": 0, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |seven_segment#0| (|seven_segment_s|) (_ BitVec 4)) ; \unit_count_reg
; yosys-smt2-register unit_count_reg 4
; yosys-smt2-wire unit_count_reg 4
(define-fun |seven_segment_n unit_count_reg| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#0| state))
(declare-fun |seven_segment#1| (|seven_segment_s|) (_ BitVec 4)) ; \unit_count
; yosys-smt2-input unit_count 4
; yosys-smt2-wire unit_count 4
; yosys-smt2-witness {"offset": 0, "path": ["\\unit_count"], "smtname": "unit_count", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |seven_segment_n unit_count| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#1| state))
; yosys-smt2-anyinit seven_segment#2 4 seven_segment.v:17.5-34.8
; yosys-smt2-witness {"offset": 0, "path": ["\\ten_count_reg"], "smtname": 2, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |seven_segment#2| (|seven_segment_s|) (_ BitVec 4)) ; \ten_count_reg
; yosys-smt2-register ten_count_reg 4
; yosys-smt2-wire ten_count_reg 4
(define-fun |seven_segment_n ten_count_reg| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#2| state))
(declare-fun |seven_segment#3| (|seven_segment_s|) (_ BitVec 4)) ; \ten_count
; yosys-smt2-input ten_count 4
; yosys-smt2-wire ten_count 4
; yosys-smt2-witness {"offset": 0, "path": ["\\ten_count"], "smtname": "ten_count", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |seven_segment_n ten_count| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#3| state))
; yosys-smt2-memory $auto$proc_rom.cc:150:do_switch$44 4 7 1 0 sync
; yosys-smt2-witness {"path": ["$auto$proc_rom.cc:150:do_switch$44"], "rom": true, "size": 16, "smtname": "$auto$proc_rom.cc:150:do_switch$44", "statebv": false, "type": "mem", "uninitialized": [], "width": 7}
(declare-fun |seven_segment#4#0| (|seven_segment_s|) (Array (_ BitVec 4) (_ BitVec 7))) ; $auto$proc_rom.cc:150:do_switch$44
(define-fun |seven_segment_m $auto$proc_rom.cc:150:do_switch$44| ((state |seven_segment_s|)) (Array (_ BitVec 4) (_ BitVec 7)) (|seven_segment#4#0| state))
; yosys-smt2-anyinit seven_segment#5 1 seven_segment.v:17.5-34.8
; yosys-smt2-witness {"offset": 0, "path": ["\\digit"], "smtname": 5, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |seven_segment#5| (|seven_segment_s|) (_ BitVec 1)) ; \digit
(define-fun |seven_segment#6| ((state |seven_segment_s|)) (_ BitVec 4) (ite (= ((_ extract 0 0) (|seven_segment#5| state)) #b1) (|seven_segment#2| state) (|seven_segment#0| state))) ; \decode
(define-fun |seven_segment_m:R0A $auto$proc_rom.cc:150:do_switch$44| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#6| state)) ; \decode
(define-fun |seven_segment#7| ((state |seven_segment_s|)) (_ BitVec 7) (select (|seven_segment#4#0| state) (|seven_segment_m:R0A $auto$proc_rom.cc:150:do_switch$44| state))) ; \segments
(define-fun |seven_segment_m:R0D $auto$proc_rom.cc:150:do_switch$44| ((state |seven_segment_s|)) (_ BitVec 7) (|seven_segment#7| state))
; yosys-smt2-output segments 7
; yosys-smt2-wire segments 7
(define-fun |seven_segment_n segments| ((state |seven_segment_s|)) (_ BitVec 7) (|seven_segment#7| state))
(declare-fun |seven_segment#8| (|seven_segment_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |seven_segment_n reset| ((state |seven_segment_s|)) Bool (|seven_segment#8| state))
(declare-fun |seven_segment#9| (|seven_segment_s|) Bool) ; \load
; yosys-smt2-input load 1
; yosys-smt2-wire load 1
; yosys-smt2-witness {"offset": 0, "path": ["\\load"], "smtname": "load", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |seven_segment_n load| ((state |seven_segment_s|)) Bool (|seven_segment#9| state))
; yosys-smt2-output digit 1
; yosys-smt2-register digit 1
; yosys-smt2-wire digit 1
(define-fun |seven_segment_n digit| ((state |seven_segment_s|)) Bool (= ((_ extract 0 0) (|seven_segment#5| state)) #b1))
; yosys-smt2-wire decode 4
(define-fun |seven_segment_n decode| ((state |seven_segment_s|)) (_ BitVec 4) (|seven_segment#6| state))
(declare-fun |seven_segment#10| (|seven_segment_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |seven_segment_n clk| ((state |seven_segment_s|)) Bool (|seven_segment#10| state))
(define-fun |seven_segment#11| ((state |seven_segment_s|)) Bool (not (or  (= ((_ extract 0 0) (|seven_segment#5| state)) #b1) false))) ; $logic_not$seven_segment.v:32$37_Y
(define-fun |seven_segment#12| ((state |seven_segment_s|)) (_ BitVec 1) (ite (|seven_segment#8| state) #b0 (ite (|seven_segment#11| state) #b1 #b0))) ; $0\digit[0:0]
(define-fun |seven_segment#13| ((state |seven_segment_s|)) (_ BitVec 4) (ite (|seven_segment#9| state) (|seven_segment#3| state) (|seven_segment#2| state))) ; $procmux$56_Y
(define-fun |seven_segment#14| ((state |seven_segment_s|)) (_ BitVec 4) (ite (|seven_segment#8| state) #b0000 (|seven_segment#13| state))) ; $0\ten_count_reg[3:0]
(define-fun |seven_segment#15| ((state |seven_segment_s|)) (_ BitVec 4) (ite (|seven_segment#9| state) (|seven_segment#1| state) (|seven_segment#0| state))) ; $procmux$51_Y
(define-fun |seven_segment#16| ((state |seven_segment_s|)) (_ BitVec 4) (ite (|seven_segment#8| state) #b0000 (|seven_segment#15| state))) ; $0\unit_count_reg[3:0]
(define-fun |seven_segment_a| ((state |seven_segment_s|)) Bool true)
(define-fun |seven_segment_u| ((state |seven_segment_s|)) Bool true)
(define-fun |seven_segment_i| ((state |seven_segment_s|)) Bool (and
  (= (bvand (select (|seven_segment#4#0| state) #b0000) #b1111111) #b0111111) ; $auto$proc_rom.cc:150:do_switch$44[0]
  (= (bvand (select (|seven_segment#4#0| state) #b0001) #b1111111) #b0000110) ; $auto$proc_rom.cc:150:do_switch$44[1]
  (= (bvand (select (|seven_segment#4#0| state) #b0010) #b1111111) #b1011011) ; $auto$proc_rom.cc:150:do_switch$44[2]
  (= (bvand (select (|seven_segment#4#0| state) #b0011) #b1111111) #b1001111) ; $auto$proc_rom.cc:150:do_switch$44[3]
  (= (bvand (select (|seven_segment#4#0| state) #b0100) #b1111111) #b1100110) ; $auto$proc_rom.cc:150:do_switch$44[4]
  (= (bvand (select (|seven_segment#4#0| state) #b0101) #b1111111) #b1101101) ; $auto$proc_rom.cc:150:do_switch$44[5]
  (= (bvand (select (|seven_segment#4#0| state) #b0110) #b1111111) #b1111100) ; $auto$proc_rom.cc:150:do_switch$44[6]
  (= (bvand (select (|seven_segment#4#0| state) #b0111) #b1111111) #b0000111) ; $auto$proc_rom.cc:150:do_switch$44[7]
  (= (bvand (select (|seven_segment#4#0| state) #b1000) #b1111111) #b1111111) ; $auto$proc_rom.cc:150:do_switch$44[8]
  (= (bvand (select (|seven_segment#4#0| state) #b1001) #b1111111) #b1100111) ; $auto$proc_rom.cc:150:do_switch$44[9]
  (= (bvand (select (|seven_segment#4#0| state) #b1010) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[10]
  (= (bvand (select (|seven_segment#4#0| state) #b1011) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[11]
  (= (bvand (select (|seven_segment#4#0| state) #b1100) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[12]
  (= (bvand (select (|seven_segment#4#0| state) #b1101) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[13]
  (= (bvand (select (|seven_segment#4#0| state) #b1110) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[14]
  (= (bvand (select (|seven_segment#4#0| state) #b1111) #b1111111) #b0000000) ; $auto$proc_rom.cc:150:do_switch$44[15]
))
(define-fun |seven_segment_h| ((state |seven_segment_s|)) Bool true)
(define-fun |seven_segment_t| ((state |seven_segment_s|) (next_state |seven_segment_s|)) Bool (and
  (= (|seven_segment#12| state) (|seven_segment#5| next_state)) ; $procdff$138 \digit
  (= (|seven_segment#14| state) (|seven_segment#2| next_state)) ; $procdff$139 \ten_count_reg
  (= (|seven_segment#16| state) (|seven_segment#0| next_state)) ; $procdff$140 \unit_count_reg
  (= (|seven_segment#4#0| state) (|seven_segment#4#0| next_state)) ; $auto$proc_rom.cc:150:do_switch$44
)) ; end of module seven_segment
; yosys-smt2-module frequency_counter
(declare-sort |frequency_counter_s| 0)
(declare-fun |frequency_counter_is| (|frequency_counter_s|) Bool)
; yosys-smt2-anyinit frequency_counter#0 12 frequency_counter.v:41.5-46.8
; yosys-smt2-witness {"offset": 0, "path": ["\\update_period"], "smtname": 0, "smtoffset": 0, "type": "init", "width": 12}
(declare-fun |frequency_counter#0| (|frequency_counter_s|) (_ BitVec 12)) ; \update_period
; yosys-smt2-register update_period 12
; yosys-smt2-wire update_period 12
(define-fun |frequency_counter_n update_period| ((state |frequency_counter_s|)) (_ BitVec 12) (|frequency_counter#0| state))
; yosys-smt2-anyinit frequency_counter#1 1 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\update_digits"], "smtname": 1, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |frequency_counter#1| (|frequency_counter_s|) (_ BitVec 1)) ; \update_digits
; yosys-smt2-register update_digits 1
; yosys-smt2-wire update_digits 1
(define-fun |frequency_counter_n update_digits| ((state |frequency_counter_s|)) Bool (= ((_ extract 0 0) (|frequency_counter#1| state)) #b1))
; yosys-smt2-anyinit frequency_counter#2 4 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\unit_count"], "smtname": 2, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |frequency_counter#2| (|frequency_counter_s|) (_ BitVec 4)) ; \unit_count
; yosys-smt2-register unit_count 4
; yosys-smt2-wire unit_count 4
(define-fun |frequency_counter_n unit_count| ((state |frequency_counter_s|)) (_ BitVec 4) (|frequency_counter#2| state))
; yosys-smt2-anyinit frequency_counter#3 4 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\ten_count"], "smtname": 3, "smtoffset": 0, "type": "init", "width": 4}
(declare-fun |frequency_counter#3| (|frequency_counter_s|) (_ BitVec 4)) ; \ten_count
; yosys-smt2-register ten_count 4
; yosys-smt2-wire ten_count 4
(define-fun |frequency_counter_n ten_count| ((state |frequency_counter_s|)) (_ BitVec 4) (|frequency_counter#3| state))
; yosys-smt2-anyinit frequency_counter#4 3 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\state"], "smtname": 4, "smtoffset": 0, "type": "init", "width": 3}
(declare-fun |frequency_counter#4| (|frequency_counter_s|) (_ BitVec 3)) ; \state
; yosys-smt2-register state 3
; yosys-smt2-wire state 3
(define-fun |frequency_counter_n state| ((state |frequency_counter_s|)) (_ BitVec 3) (|frequency_counter#4| state))
(declare-fun |frequency_counter#5| (|frequency_counter_s|) Bool) ; \signal
; yosys-smt2-input signal 1
; yosys-smt2-wire signal 1
; yosys-smt2-witness {"offset": 0, "path": ["\\signal"], "smtname": "signal", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |frequency_counter_n signal| ((state |frequency_counter_s|)) Bool (|frequency_counter#5| state))
; yosys-smt2-cell seven_segment seven_segment0
; yosys-smt2-witness {"path": ["\\seven_segment0"], "smtname": "seven_segment0", "type": "cell"}
(declare-fun |frequency_counter#6| (|frequency_counter_s|) (_ BitVec 7)) ; \segments
(declare-fun |frequency_counter#7| (|frequency_counter_s|) Bool) ; \digit
(declare-fun |frequency_counter_h seven_segment0| (|frequency_counter_s|) |seven_segment_s|)
; yosys-smt2-output segments 7
; yosys-smt2-wire segments 7
(define-fun |frequency_counter_n segments| ((state |frequency_counter_s|)) (_ BitVec 7) (|frequency_counter#6| state))
(declare-fun |frequency_counter#8| (|frequency_counter_s|) Bool) ; \reset
; yosys-smt2-input reset 1
; yosys-smt2-wire reset 1
; yosys-smt2-witness {"offset": 0, "path": ["\\reset"], "smtname": "reset", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |frequency_counter_n reset| ((state |frequency_counter_s|)) Bool (|frequency_counter#8| state))
(declare-fun |frequency_counter#9| (|frequency_counter_s|) Bool) ; \period_load
; yosys-smt2-input period_load 1
; yosys-smt2-wire period_load 1
; yosys-smt2-witness {"offset": 0, "path": ["\\period_load"], "smtname": "period_load", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |frequency_counter_n period_load| ((state |frequency_counter_s|)) Bool (|frequency_counter#9| state))
(declare-fun |frequency_counter#10| (|frequency_counter_s|) (_ BitVec 12)) ; \period
; yosys-smt2-input period 12
; yosys-smt2-wire period 12
; yosys-smt2-witness {"offset": 0, "path": ["\\period"], "smtname": "period", "smtoffset": 0, "type": "input", "width": 12}
(define-fun |frequency_counter_n period| ((state |frequency_counter_s|)) (_ BitVec 12) (|frequency_counter#10| state))
; yosys-smt2-witness {"offset": 0, "path": ["\\past_valid"], "smtname": 11, "smtoffset": 0, "type": "reg", "width": 1}
(declare-fun |frequency_counter#11| (|frequency_counter_s|) (_ BitVec 1)) ; \past_valid
; yosys-smt2-register past_valid 1
; yosys-smt2-wire past_valid 1
(define-fun |frequency_counter_n past_valid| ((state |frequency_counter_s|)) Bool (= ((_ extract 0 0) (|frequency_counter#11| state)) #b1))
; yosys-smt2-cell edge_detect edge_detect0
; yosys-smt2-witness {"path": ["\\edge_detect0"], "smtname": "edge_detect0", "type": "cell"}
(declare-fun |frequency_counter#12| (|frequency_counter_s|) Bool) ; \leading_edge_detect
(declare-fun |frequency_counter_h edge_detect0| (|frequency_counter_s|) |edge_detect_s|)
; yosys-smt2-wire leading_edge_detect 1
(define-fun |frequency_counter_n leading_edge_detect| ((state |frequency_counter_s|)) Bool (|frequency_counter#12| state))
; yosys-smt2-anyinit frequency_counter#13 7 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\edge_counter"], "smtname": 13, "smtoffset": 0, "type": "init", "width": 7}
(declare-fun |frequency_counter#13| (|frequency_counter_s|) (_ BitVec 7)) ; \edge_counter
; yosys-smt2-register edge_counter 7
; yosys-smt2-wire edge_counter 7
(define-fun |frequency_counter_n edge_counter| ((state |frequency_counter_s|)) (_ BitVec 7) (|frequency_counter#13| state))
; yosys-smt2-output digit 1
; yosys-smt2-wire digit 1
(define-fun |frequency_counter_n digit| ((state |frequency_counter_s|)) Bool (|frequency_counter#7| state))
; yosys-smt2-anyinit frequency_counter#14 12 frequency_counter.v:54.5-102.8
; yosys-smt2-witness {"offset": 0, "path": ["\\clk_counter"], "smtname": 14, "smtoffset": 0, "type": "init", "width": 12}
(declare-fun |frequency_counter#14| (|frequency_counter_s|) (_ BitVec 12)) ; \clk_counter
; yosys-smt2-register clk_counter 12
; yosys-smt2-wire clk_counter 12
(define-fun |frequency_counter_n clk_counter| ((state |frequency_counter_s|)) (_ BitVec 12) (|frequency_counter#14| state))
(declare-fun |frequency_counter#15| (|frequency_counter_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |frequency_counter_n clk| ((state |frequency_counter_s|)) Bool (|frequency_counter#15| state))
; yosys-smt2-anyseq frequency_counter#16 1 $auto$setundef.cc:525:execute$156
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyseq_auto_setundef_cc_525_execute_156"], "smtname": 16, "smtoffset": 0, "type": "seq", "width": 1}
(declare-fun |frequency_counter#16| (|frequency_counter_s|) (_ BitVec 1)) ; \_witness_.anyseq_auto_setundef_cc_525_execute_156
; yosys-smt2-wire _witness_.anyseq_auto_setundef_cc_525_execute_156 1
(define-fun |frequency_counter_n _witness_.anyseq_auto_setundef_cc_525_execute_156| ((state |frequency_counter_s|)) Bool (= ((_ extract 0 0) (|frequency_counter#16| state)) #b1))
; yosys-smt2-anyinit frequency_counter#17 1 frequency_counter.v:33.9-39.12
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_153"], "smtname": 17, "smtoffset": 0, "type": "init", "width": 1}
(declare-fun |frequency_counter#17| (|frequency_counter_s|) (_ BitVec 1)) ; \_witness_.anyinit_procdff_153
; yosys-smt2-register _witness_.anyinit_procdff_153 1
; yosys-smt2-wire _witness_.anyinit_procdff_153 1
(define-fun |frequency_counter_n _witness_.anyinit_procdff_153| ((state |frequency_counter_s|)) Bool (= ((_ extract 0 0) (|frequency_counter#17| state)) #b1))
; yosys-smt2-cover 0 $cover$frequency_counter.v:37$28 frequency_counter.v:37.33-38.63
(define-fun |frequency_counter_c 0| ((state |frequency_counter_s|)) Bool (and (= ((_ extract 0 0) (|frequency_counter#17| state)) #b1) (= ((_ extract 0 0) (|frequency_counter#11| state)) #b1))) ; $cover$frequency_counter.v:37$28
(define-fun |frequency_counter#18| ((state |frequency_counter_s|)) (_ BitVec 1) (bvnot (ite (|frequency_counter#5| state) #b1 #b0))) ; $0$formal$frequency_counter.v:36$2_CHECK[0:0]$7
; yosys-smt2-assume 0 $assume$frequency_counter.v:36$27 frequency_counter.v:36.31-37.32
(define-fun |frequency_counter_u 0| ((state |frequency_counter_s|)) Bool (or (= ((_ extract 0 0) (|frequency_counter#18| state)) #b1) (not true))) ; $assume$frequency_counter.v:36$27
(define-fun |frequency_counter#19| ((state |frequency_counter_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|frequency_counter#11| state)) #b1) (|frequency_counter#16| state) (ite (|frequency_counter#8| state) #b1 #b0))) ; $0$formal$frequency_counter.v:35$1_CHECK[0:0]$5
(define-fun |frequency_counter#20| ((state |frequency_counter_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|frequency_counter#11| state)) #b1) #b0 #b1)) ; $0$formal$frequency_counter.v:35$1_EN[0:0]$6
; yosys-smt2-assume 1 $assume$frequency_counter.v:35$26 frequency_counter.v:35.32-36.30
(define-fun |frequency_counter_u 1| ((state |frequency_counter_s|)) Bool (or (= ((_ extract 0 0) (|frequency_counter#19| state)) #b1) (not (= ((_ extract 0 0) (|frequency_counter#20| state)) #b1)))) ; $assume$frequency_counter.v:35$26
(define-fun |frequency_counter#21| ((state |frequency_counter_s|)) Bool (not (or  (|frequency_counter#8| state) false))) ; $logic_not$frequency_counter.v:38$13_Y
(define-fun |frequency_counter#22| ((state |frequency_counter_s|)) Bool (= (|frequency_counter#3| state) #b0001)) ; $eq$frequency_counter.v:38$14_Y
(define-fun |frequency_counter#23| ((state |frequency_counter_s|)) Bool (and (or  (|frequency_counter#21| state) false) (or  (|frequency_counter#22| state) false))) ; $logic_and$frequency_counter.v:38$15_Y
(define-fun |frequency_counter#24| ((state |frequency_counter_s|)) Bool (not (or  (= ((_ extract 0 0) (|frequency_counter#2| state)) #b1) (= ((_ extract 1 1) (|frequency_counter#2| state)) #b1) (= ((_ extract 2 2) (|frequency_counter#2| state)) #b1) (= ((_ extract 3 3) (|frequency_counter#2| state)) #b1)))) ; $eq$frequency_counter.v:38$16_Y
(define-fun |frequency_counter#25| ((state |frequency_counter_s|)) Bool (and (or  (|frequency_counter#23| state) false) (or  (|frequency_counter#24| state) false))) ; $0$formal$frequency_counter.v:37$3_CHECK[0:0]$9
(define-fun |frequency_counter#26| ((state |frequency_counter_s|)) (_ BitVec 12) (bvadd (|frequency_counter#14| state) #b000000000001)) ; $add$frequency_counter.v:68$20_Y
(define-fun |frequency_counter#27| ((state |frequency_counter_s|)) Bool (bvuge (|frequency_counter#14| state) (|frequency_counter#0| state))) ; $ge$frequency_counter.v:73$22_Y
(define-fun |frequency_counter#28| ((state |frequency_counter_s|)) (_ BitVec 12) (ite (|frequency_counter#27| state) #b000000000000 (|frequency_counter#26| state))) ; $procmux$106_Y
(define-fun |frequency_counter#29| ((state |frequency_counter_s|)) Bool (not (or  (= ((_ extract 0 0) (|frequency_counter#4| state)) #b1) (= ((_ extract 1 1) (|frequency_counter#4| state)) #b1) (= ((_ extract 2 2) (|frequency_counter#4| state)) #b1)))) ; $procmux$109_CMP
(define-fun |frequency_counter#30| ((state |frequency_counter_s|)) (_ BitVec 12) (ite (|frequency_counter#29| state) (|frequency_counter#28| state) (|frequency_counter#14| state))) ; $procmux$108_Y
(define-fun |frequency_counter#31| ((state |frequency_counter_s|)) (_ BitVec 12) (ite (|frequency_counter#8| state) #b000000000000 (|frequency_counter#30| state))) ; $0\clk_counter[11:0]
(define-fun |frequency_counter#32| ((state |frequency_counter_s|)) (_ BitVec 7) (bvsub (|frequency_counter#13| state) #b0001010)) ; $sub$frequency_counter.v:85$24_Y
(define-fun |frequency_counter#33| ((state |frequency_counter_s|)) Bool (bvult (|frequency_counter#13| state) #b0001010)) ; $lt$frequency_counter.v:82$23_Y
(define-fun |frequency_counter#34| ((state |frequency_counter_s|)) (_ BitVec 7) (ite (|frequency_counter#33| state) (|frequency_counter#13| state) (|frequency_counter#32| state))) ; $procmux$117_Y
(define-fun |frequency_counter#35| ((state |frequency_counter_s|)) (_ BitVec 7) (bvadd (|frequency_counter#13| state) #b0000001)) ; $add$frequency_counter.v:71$21_Y
(define-fun |frequency_counter#36| ((state |frequency_counter_s|)) (_ BitVec 7) (ite (|frequency_counter#12| state) (|frequency_counter#35| state) (|frequency_counter#13| state))) ; $procmux$120_Y
(define-fun |frequency_counter#37| ((state |frequency_counter_s|)) Bool (= (|frequency_counter#4| state) #b010)) ; $procmux$115_CMP
(define-fun |frequency_counter#38| ((state |frequency_counter_s|)) Bool (= (|frequency_counter#4| state) #b001)) ; $procmux$119_CMP
(define-fun |frequency_counter#39| ((state |frequency_counter_s|)) (_ BitVec 7) (ite (|frequency_counter#29| state) (|frequency_counter#36| state) (ite (|frequency_counter#38| state) (|frequency_counter#34| state) (ite (|frequency_counter#37| state) #b0000000 (|frequency_counter#13| state))))) ; $procmux$114_Y
(define-fun |frequency_counter#40| ((state |frequency_counter_s|)) (_ BitVec 7) (ite (|frequency_counter#8| state) #b0000000 (|frequency_counter#39| state))) ; $0\edge_counter[6:0]
(define-fun |frequency_counter#41| ((state |frequency_counter_s|)) (_ BitVec 3) (ite (|frequency_counter#33| state) #b010 (|frequency_counter#4| state))) ; $procmux$64_Y
(define-fun |frequency_counter#42| ((state |frequency_counter_s|)) (_ BitVec 3) (ite (|frequency_counter#27| state) #b001 (|frequency_counter#4| state))) ; $procmux$68_Y
(define-fun |frequency_counter#43| ((state |frequency_counter_s|)) (_ BitVec 3) (ite (|frequency_counter#29| state) (|frequency_counter#42| state) (ite (|frequency_counter#38| state) (|frequency_counter#41| state) #b000))) ; $procmux$66_Y
(define-fun |frequency_counter#44| ((state |frequency_counter_s|)) (_ BitVec 3) (ite (|frequency_counter#8| state) #b000 (|frequency_counter#43| state))) ; $0\state[2:0]
(define-fun |frequency_counter#45| ((state |frequency_counter_s|)) (_ BitVec 4) (bvadd (|frequency_counter#3| state) #b0001)) ; $add$frequency_counter.v:86$25_Y
(define-fun |frequency_counter#46| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#33| state) (|frequency_counter#3| state) (|frequency_counter#45| state))) ; $procmux$93_Y
(define-fun |frequency_counter#47| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#27| state) #b0000 (|frequency_counter#3| state))) ; $procmux$97_Y
(define-fun |frequency_counter#48| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#29| state) (|frequency_counter#47| state) (ite (|frequency_counter#38| state) (|frequency_counter#46| state) (|frequency_counter#3| state)))) ; $procmux$95_Y
(define-fun |frequency_counter#49| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#8| state) #b0000 (|frequency_counter#48| state))) ; $0\ten_count[3:0]
(define-fun |frequency_counter#50| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#27| state) #b0000 (|frequency_counter#2| state))) ; $procmux$84_Y
(define-fun |frequency_counter#51| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#29| state) (|frequency_counter#50| state) (ite (|frequency_counter#37| state) ((_ extract 3 0) (|frequency_counter#13| state)) (|frequency_counter#2| state)))) ; $procmux$82_Y
(define-fun |frequency_counter#52| ((state |frequency_counter_s|)) (_ BitVec 4) (ite (|frequency_counter#8| state) #b0000 (|frequency_counter#51| state))) ; $0\unit_count[3:0]
(define-fun |frequency_counter#53| ((state |frequency_counter_s|)) (_ BitVec 1) (ite (|frequency_counter#29| state) #b0 (ite (|frequency_counter#37| state) #b1 (|frequency_counter#1| state)))) ; $procmux$75_Y
(define-fun |frequency_counter#54| ((state |frequency_counter_s|)) (_ BitVec 1) (ite (|frequency_counter#8| state) #b0 (|frequency_counter#53| state))) ; $0\update_digits[0:0]
(define-fun |frequency_counter#55| ((state |frequency_counter_s|)) (_ BitVec 12) (ite (|frequency_counter#9| state) (|frequency_counter#10| state) (|frequency_counter#0| state))) ; $procmux$126_Y
(define-fun |frequency_counter#56| ((state |frequency_counter_s|)) (_ BitVec 12) (ite (|frequency_counter#8| state) #b010010101111 (|frequency_counter#55| state))) ; $0\update_period[11:0]
(define-fun |frequency_counter_a| ((state |frequency_counter_s|)) Bool (and
  (|edge_detect_a| (|frequency_counter_h edge_detect0| state))
  (|seven_segment_a| (|frequency_counter_h seven_segment0| state))
))
(define-fun |frequency_counter_u| ((state |frequency_counter_s|)) Bool (and
  (|frequency_counter_u 0| state)
  (|frequency_counter_u 1| state)
  (|edge_detect_u| (|frequency_counter_h edge_detect0| state))
  (|seven_segment_u| (|frequency_counter_h seven_segment0| state))
))
(define-fun |frequency_counter_i| ((state |frequency_counter_s|)) Bool (and
  (= (= ((_ extract 0 0) (|frequency_counter#11| state)) #b1) false) ; past_valid
  (|edge_detect_i| (|frequency_counter_h edge_detect0| state))
  (|seven_segment_i| (|frequency_counter_h seven_segment0| state))
))
(define-fun |frequency_counter_h| ((state |frequency_counter_s|)) Bool (and
  (= (|frequency_counter_is| state) (|edge_detect_is| (|frequency_counter_h edge_detect0| state)))
  (= (|frequency_counter#5| state) (|edge_detect_n signal| (|frequency_counter_h edge_detect0| state))) ; edge_detect.signal
  (= (|frequency_counter#12| state) (|edge_detect_n leading_edge_detect| (|frequency_counter_h edge_detect0| state))) ; edge_detect.leading_edge_detect
  (= (|frequency_counter#15| state) (|edge_detect_n clk| (|frequency_counter_h edge_detect0| state))) ; edge_detect.clk
  (= (|frequency_counter_is| state) (|seven_segment_is| (|frequency_counter_h seven_segment0| state)))
  (= (|frequency_counter#2| state) (|seven_segment_n unit_count| (|frequency_counter_h seven_segment0| state))) ; seven_segment.unit_count
  (= (|frequency_counter#3| state) (|seven_segment_n ten_count| (|frequency_counter_h seven_segment0| state))) ; seven_segment.ten_count
  (= (|frequency_counter#6| state) (|seven_segment_n segments| (|frequency_counter_h seven_segment0| state))) ; seven_segment.segments
  (= (|frequency_counter#8| state) (|seven_segment_n reset| (|frequency_counter_h seven_segment0| state))) ; seven_segment.reset
  (= (= ((_ extract 0 0) (|frequency_counter#1| state)) #b1) (|seven_segment_n load| (|frequency_counter_h seven_segment0| state))) ; seven_segment.load
  (= (|frequency_counter#7| state) (|seven_segment_n digit| (|frequency_counter_h seven_segment0| state))) ; seven_segment.digit
  (= (|frequency_counter#15| state) (|seven_segment_n clk| (|frequency_counter_h seven_segment0| state))) ; seven_segment.clk
  (|edge_detect_h| (|frequency_counter_h edge_detect0| state))
  (|seven_segment_h| (|frequency_counter_h seven_segment0| state))
))
(define-fun |frequency_counter_t| ((state |frequency_counter_s|) (next_state |frequency_counter_s|)) Bool (and
  (= (ite (|frequency_counter#25| state) #b1 #b0) (|frequency_counter#17| next_state)) ; $procdff$153 \_witness_.anyinit_procdff_153
  (= (|frequency_counter#31| state) (|frequency_counter#14| next_state)) ; $procdff$142 \clk_counter
  (= (|frequency_counter#40| state) (|frequency_counter#13| next_state)) ; $procdff$141 \edge_counter
  (= #b1 (|frequency_counter#11| next_state)) ; $procdff$148 \past_valid
  (= (|frequency_counter#44| state) (|frequency_counter#4| next_state)) ; $procdff$146 \state
  (= (|frequency_counter#49| state) (|frequency_counter#3| next_state)) ; $procdff$143 \ten_count
  (= (|frequency_counter#52| state) (|frequency_counter#2| next_state)) ; $procdff$144 \unit_count
  (= (|frequency_counter#54| state) (|frequency_counter#1| next_state)) ; $procdff$145 \update_digits
  (= (|frequency_counter#56| state) (|frequency_counter#0| next_state)) ; $procdff$147 \update_period
  (|edge_detect_t| (|frequency_counter_h edge_detect0| state) (|frequency_counter_h edge_detect0| next_state))
  (|seven_segment_t| (|frequency_counter_h seven_segment0| state) (|frequency_counter_h seven_segment0| next_state))
)) ; end of module frequency_counter
; yosys-smt2-topmod frequency_counter
; end of yosys output
